#include <algorithm>
#include <clio/backend/BackendFactory.h>
#include <clio/backend/DBHelpers.h>
#include <clio/rpc/RPCHelpers.h>
#include <gtest/gtest.h>

#include <test/env/env.h>

#include <boost/log/core.hpp>
#include <boost/log/expressions.hpp>
#include <boost/log/trivial.hpp>


void
writeAccountTx(
    Backend::BackendInterface& backend,
    boost::asio::yield_context& yield)
{
    auto hexStringToBinaryString = [](auto const& hex) {
        auto blob = ripple::strUnHex(hex);
        std::string strBlob;
        for (auto c : *blob)
        {
            strBlob += c;
        }
        return strBlob;
    };

    std::string accountIndex = "B7D526FDDF9E3B3F95C3DC97C353065B0482302500BBB8051A5C090B596C6133";

    std::string account = "110061220000000024000000012501C1F1FE2D00000000554F9B612F6AD7CF041CA672F3E6B6CC5B13EB00F5E55A7D76C7C1CFB8B2C891C3624000000005F767A181140A20B3C85F482532A9578DBB3950B85CA06594D1";

    // These are just dummy data that will be owned by the account `account`.
    // They will contain lines, channels, escrows, 
    using hash_tx_meta = std::tuple<std::string, std::string, std::string>;
    std::vector<hash_tx_meta> const txs = {};

    auto txAndMetaToBlob = [&](std::string&& tx, std::uint32_t seq, std::string&& meta) -> AccountTransactionsData
    {
        auto txBlob = hexStringToBinaryString(tx);
        auto metaBlob = hexStringToBinaryString(meta);

        auto txCopy = txBlob;
        ripple::SerialIter it{txCopy.data(), txCopy.size()};
        ripple::STTx sttx{it};
        
        ripple::uint256 hash = sttx.getTransactionID();

        auto metaCopy = metaBlob;
        ripple::TxMeta stMeta{hash, seq, metaCopy};

        AccountTransactionsData tttt {stMeta, hash};
        return tttt;
    };

    std::vector<AccountTransactionsData> accountTxs = {
        txAndMetaToBlob(
            "120007220000000024000A94572019000A9455201B046165446440000000A482420065D5439D802F4863E000000000000000000000000055534400000000000A20B3C85F482532A9578DBB3950B85CA06594D16840000000000000157321028903D2F84D81A7351900D9EA43562B3983DB6FCAF1217C89D67B20E3019E4433744730450221009127867053B172D6860CA152739401AA57CB73F4A5E3AD0F9A4007C27C3C953D0220584E115109BBC6EF65657A36AEDF3F1B4CEBE71D89550874E293C1A7914A10688114F7D1D95AAC2310CC1FB3FE64E1750EDE539D296E",
            63116310,

        ),
        txAndMetaToBlob(
            "120007220000000024000A94562019000A9453201B0461654464D5099562C0A701E000000000000000000000000055534400000000000A20B3C85F482532A9578DBB3950B85CA06594D165400000002B4B11A06840000000000000157321028903D2F84D81A7351900D9EA43562B3983DB6FCAF1217C89D67B20E3019E443374473045022100CB3A335EF8AA019A3853649C45EBF7CD6AFA3D6A8792C7D5B995F4690DD0630302204045EAAC94D7BC654ACD7354CA6F051A0505191679A1C7EA756A607F1A7A7CE28114F7D1D95AAC2310CC1FB3FE64E1750EDE539D296E",
            63116311,

        ),
        txAndMetaToBlob(
            "120007220000000024000A94562019000A9453201B0461654464D5099562C0A701E000000000000000000000000055534400000000000A20B3C85F482532A9578DBB3950B85CA06594D165400000002B4B11A06840000000000000157321028903D2F84D81A7351900D9EA43562B3983DB6FCAF1217C89D67B20E3019E443374473045022100CB3A335EF8AA019A3853649C45EBF7CD6AFA3D6A8792C7D5B995F4690DD0630302204045EAAC94D7BC654ACD7354CA6F051A0505191679A1C7EA756A607F1A7A7CE28114F7D1D95AAC2310CC1FB3FE64E1750EDE539D296E",
            63116312,

        ),
        txAndMetaToBlob(
            "120007220000000024000A94562019000A9453201B0461654464D5099562C0A701E000000000000000000000000055534400000000000A20B3C85F482532A9578DBB3950B85CA06594D165400000002B4B11A06840000000000000157321028903D2F84D81A7351900D9EA43562B3983DB6FCAF1217C89D67B20E3019E443374473045022100CB3A335EF8AA019A3853649C45EBF7CD6AFA3D6A8792C7D5B995F4690DD0630302204045EAAC94D7BC654ACD7354CA6F051A0505191679A1C7EA756A607F1A7A7CE28114F7D1D95AAC2310CC1FB3FE64E1750EDE539D296E",
            63116313,

        ),
        txAndMetaToBlob(
            "12000722000000002404E01272201904E0126C201B04616546644000003A3529440065D5A0BF7EAA60DC0000000000000000000000000055534400000000000A20B3C85F482532A9578DBB3950B85CA06594D1684000000000000014732103C71E57783E0651DFF647132172980B1F598334255F01DD447184B5D66501E67A74473045022100DA51165B61C71A6C94EC6D51E5BF3138FB71D7E79C909B96FF71FA16F2FB412702202C3A713640B78E4FB66A00B00C8C6E186803DD3FB0F83F93AC6FD371B2EBFA2F8114521727AB76FD862A0DF5EB6668C8165573FE691C",
            63116314,

        ),
        txAndMetaToBlob(
            "1200082403CDD45D201903CDD448201B0461654768400000000000000A73210361BFD43D1EEA54B77CC152887312949EBF052997FBFFCDAF6F2653164B55B21074473045022100F77B17062FC566121976D45E97B5CE9B456F10142D3CD720C13CEBADCF85D70302204B05F5EB84974A6A0EB12AB8EA4E1B388E3CC12FBCCCC4041763D0ABC272E9E681142F7169625789418D4D29C8FB43F365D780F56530",
            63116315,

        ),
        txAndMetaToBlob(
            "1200072403CDD45C2A2A7FFFA2201B04616547644000000165A0BC0065D547DA2716F7EBBF00000000000000000000000055534400000000000A20B3C85F482532A9578DBB3950B85CA06594D168400000000000000A73210361BFD43D1EEA54B77CC152887312949EBF052997FBFFCDAF6F2653164B55B21074473045022100F36C01D9B7064CE226E361EA07F685C0C94FAB0FD2B375FBA6E054D353768DA802203B39D376399506C6E85D5E34139574AF9F33B408F2838F1E0C25A28E0C17D65981142F7169625789418D4D29C8FB43F365D780F56530",
            63116316,
            "201C00000011F8E5110061250461654255F18F2DBDC3690FB28218380BF1168A026B84040FE38F1866B07CBD043FAF0FD55635E3EA0727114A679572BDC47A97D0DB62990A992C7078DD363611E4AF3DD55FE62403CDD45C2D0000000F6240000004DDB9B854E1E722000000002403CDD45D2D00000010417CA852F394FD698696642B40BF83AFC26240000004DDB9B84A72210200000000000000000000000048D9269F9A408009272AB0F0A7F81271AD55EFC081142F7169625789418D4D29C8FB43F365D780F56530E1E1E51100645638EE88C5482ACE7CB9599A65E953D1F9D9E2EA0D2179581538472BA0DB60A0FAE722000000005838EE88C5482ACE7CB9599A65E953D1F9D9E2EA0D2179581538472BA0DB60A0FA82142F7169625789418D4D29C8FB43F365D780F56530E1E1E3110064564627DFFCFF8B5A265EDBD8AE8C14A52325DBFEDAF4F5C32E5B09A5021F97409BE8365B09A5021F97409B584627DFFCFF8B5A265EDBD8AE8C14A52325DBFEDAF4F5C32E5B09A5021F97409B0311000000000000000000000000555344000000000004110A20B3C85F482532A9578DBB3950B85CA06594D1E1E1E311006F56BE1CDFD823CA8BA82906EA27AB617AE8748D8FB7922944F7606BB41C6BC7BCBBE82403CDD45C2A2A7FFFA250104627DFFCFF8B5A265EDBD8AE8C14A52325DBFEDAF4F5C32E5B09A5021F97409B644000000165A0BC0065D547DA2716F7EBBF00000000000000000000000055534400000000000A20B3C85F482532A9578DBB3950B85CA06594D181142F7169625789418D4D29C8FB43F365D780F56530E1E1F1031000"
        )
    };

    std::string b58 = "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B";
    auto id = *RPC::accountFromStringStrict("rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B");

    std::string rawHeader =
        "03C3141A01633CD656F91B4EBB5EB89B791BD34DBC8A04BB6F407C5335"
        "BC54351E"
        "DD73"
        "3898497E809E04074D14D271E4832D7888754F9230800761563A292FA2"
        "315A6DB6"
        "FE30"
        "CC5909B285080FCD6773CC883F9FE0EE4D439340AC592AADB973ED3CF5"
        "3E2232B3"
        "3EF5"
        "7CECAC2816E3122816E31A0A00F8377CD95DFA484CFAE282656A58CE5A"
        "A29652EF"
        "FD80"
        "AC59CD91416E4E13DBBE";

    auto binaryStringToUint256 = [](auto const& bin) -> ripple::uint256 {
        ripple::uint256 uint;
        return uint.fromVoid((void const*)bin.data());
    };
    auto ledgerInfoToBinaryString = [](auto const& info) {
        auto blob = RPC::ledgerInfoToBlob(info, true);
        std::string strBlob;
        for (auto c : blob)
        {
            strBlob += c;
        }
        return strBlob;
    };

    std::string rawHeaderBlob = hexStringToBinaryString(rawHeader);
    ripple::LedgerInfo lgrInfo =
        deserializeHeader(ripple::makeSlice(rawHeaderBlob));

    backend.startWrites();
    backend.writeLedger(lgrInfo, std::move(rawHeaderBlob));
    backend.writeSuccessor(
        uint256ToString(Backend::firstKey),
        lgrInfo.seq,
        uint256ToString(Backend::lastKey));
    ASSERT_TRUE(backend.finishWrites(lgrInfo.seq));
    {
        auto rng = backend.fetchLedgerRange();
        EXPECT_TRUE(rng.has_value());
        EXPECT_EQ(rng->minSequence, rng->maxSequence);
        EXPECT_EQ(rng->maxSequence, lgrInfo.seq);
    }
    {
        auto seq = backend.fetchLatestLedgerSequence(yield);
        EXPECT_TRUE(seq.has_value());
        EXPECT_EQ(*seq, lgrInfo.seq);
    }

    {
        auto retLgr = backend.fetchLedgerBySequence(lgrInfo.seq, yield);
        ASSERT_TRUE(retLgr.has_value());
        EXPECT_EQ(retLgr->seq, lgrInfo.seq);
        EXPECT_EQ(
            RPC::ledgerInfoToBlob(lgrInfo), RPC::ledgerInfoToBlob(*retLgr));
    }

    EXPECT_FALSE(
        backend.fetchLedgerBySequence(lgrInfo.seq + 1, yield).has_value());
    auto lgrInfoOld = lgrInfo;

    auto lgrInfoNext = lgrInfo;
    lgrInfoNext.seq = lgrInfo.seq + 1;
    lgrInfoNext.parentHash = lgrInfo.hash;
    lgrInfoNext.hash++;
    lgrInfoNext.accountHash = ~lgrInfo.accountHash;
    {
        std::string rawHeaderBlob = ledgerInfoToBinaryString(lgrInfoNext);

        backend.startWrites();
        backend.writeLedger(lgrInfoNext, std::move(rawHeaderBlob));
        ASSERT_TRUE(backend.finishWrites(lgrInfoNext.seq));
    }
    {
        auto rng = backend.fetchLedgerRange();
        EXPECT_TRUE(rng.has_value());
        EXPECT_EQ(rng->minSequence, lgrInfoOld.seq);
        EXPECT_EQ(rng->maxSequence, lgrInfoNext.seq);
    }
    {
        auto seq = backend.fetchLatestLedgerSequence(yield);
        EXPECT_EQ(seq, lgrInfoNext.seq);
    }
    {
        auto retLgr = backend.fetchLedgerBySequence(lgrInfoNext.seq, yield);
        EXPECT_TRUE(retLgr.has_value());
        EXPECT_EQ(retLgr->seq, lgrInfoNext.seq);
        EXPECT_EQ(
            RPC::ledgerInfoToBlob(*retLgr), RPC::ledgerInfoToBlob(lgrInfoNext));
        EXPECT_NE(
            RPC::ledgerInfoToBlob(*retLgr), RPC::ledgerInfoToBlob(lgrInfoOld));
        retLgr = backend.fetchLedgerBySequence(lgrInfoNext.seq - 1, yield);
        EXPECT_EQ(
            RPC::ledgerInfoToBlob(*retLgr), RPC::ledgerInfoToBlob(lgrInfoOld));
        EXPECT_NE(
            RPC::ledgerInfoToBlob(*retLgr), RPC::ledgerInfoToBlob(lgrInfoNext));
        retLgr = backend.fetchLedgerBySequence(lgrInfoNext.seq - 2, yield);
        EXPECT_FALSE(backend.fetchLedgerBySequence(lgrInfoNext.seq - 2, yield)
                         .has_value());

        auto txns =
            backend.fetchAllTransactionsInLedger(lgrInfoNext.seq, yield);
        EXPECT_EQ(txns.size(), 0);

        auto hashes =
            backend.fetchAllTransactionHashesInLedger(lgrInfoNext.seq, yield);
        EXPECT_EQ(hashes.size(), 0);
    }

    {
        backend.startWrites();
        lgrInfoNext.seq = lgrInfoNext.seq + 1;
        lgrInfoNext.txHash = ~lgrInfo.txHash;
        lgrInfoNext.accountHash = lgrInfoNext.accountHash ^ lgrInfoNext.txHash;
        lgrInfoNext.parentHash = lgrInfoNext.hash;
        lgrInfoNext.hash++;
          
        backend.writeLedger(lgrInfoNext, ledgerInfoToBinaryString(lgrInfoNext));

        backend.writeLedgerObject(
            hexStringToBinaryString(accountIndex),
            lgrInfoNext.seq,
            hexStringToBinaryString(account));

        backend.writeAccountTransactions(std::move(accountTxs));

        ASSERT_TRUE(backend.finishWrites(lgrInfoNext.seq));
    }
}

TYPED_TEST_SUITE(Clio, cfgMOCK);

TYPED_TEST(Clio, accountTxWithLedger)
{
    boost::asio::io_context ioc;
    std::optional<boost::asio::io_context::work> work;
    work.emplace(ioc);
    std::atomic_bool done = false;

    boost::asio::spawn(
        ioc, [this, &done, &work](boost::asio::yield_context yield) {
            boost::log::core::get()->set_filter(
                boost::log::trivial::severity >= boost::log::trivial::warning);

            std::string keyspace = this->keyspace();

            auto session = std::make_shared<MockSubscriber>();
            Backend::LedgerRange range;
            range.maxSequence = 63116316;
            range.minSequence = 63116310;

            writeAccountTx(this->app().backend(), yield);

            boost::json::object request = {
                {"method", "account_tx"},
                {"account", "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B"},
                {"ledger_index", 63116315}};

            auto context = RPC::make_WsContext(
                request, this->app(), session, range, "127.0.0.1", yield);

            ASSERT_TRUE(context);

            auto result = RPC::buildResponse(*context);

            // std::cout << RPC::make_error(std::get<RPC::Status>(result)) << std::endl;

            ASSERT_TRUE(std::holds_alternative<boost::json::object>(result));

            auto obj = std::get<boost::json::object>(result);
            std::cout << obj << std::endl;
            ASSERT_TRUE(obj["account"].as_string() == "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B");
            
            auto& offers = obj["offers"].as_array();

            // Despite limit being 10, this should report 1 offer, since the other objects
            // owned objects are not Offers.
            ASSERT_EQ(offers.size(), 1);

            auto& offer = offers[0].as_object();

            // addLine() will make the line look different from its raw JSON format.
            ASSERT_TRUE(offer["taker_pays"].is_object());
            ASSERT_TRUE(offer["taker_gets"].as_string() == "1000000000");

            ASSERT_TRUE(obj["marker"].as_string() == "276DB9B772F02422CF5F7B02699B36193C9D68B15698DF5235EB457857592DEA,1");

            done = true;
            work.reset();
        });

    ioc.run();
    EXPECT_EQ(done, true);
}