name: Run conan and cmake
description: Run conan and cmake
inputs:
  conan_profile:
    description: Conan profile name
    required: true
  conan_cache_hit:
    description: Whether conan cache has been downloaded
    required: true
    default: 'false'
  build_type:
    description: Build type for third-party libraries and clio. Could be 'Release', 'Debug'
    required: true
    default: 'Release'
  code_coverage:
    description: Whether conan's coverage option should be on or not
    required: true
    default: 'false'
  static:
    description: Whether Clio is to be statically linked
    required: true
    default: 'false'
runs:
  using: composite
  steps:
    - name: Create build directory
      shell: bash
      run: mkdir -p build

    - name: Run conan
      shell: bash
      env:
        BUILD_OPTION: "${{ inputs.conan_cache_hit == 'true' && 'missing' || '' }}"
        CODE_COVERAGE: "${{ inputs.code_coverage == 'true' && 'True' || 'False' }}"
        STATIC_OPTION: "${{ inputs.static == 'true' && 'True' || 'False' }}"
      run: |
        cd build
        conan install .. -of . -b $BUILD_OPTION -s build_type=${{ inputs.build_type }} -o clio:static="${STATIC_OPTION}" -o clio:tests=True -o clio:lint=False -o clio:coverage="${CODE_COVERAGE}" --profile ${{ inputs.conan_profile }}

    - name: Run cmake
      shell: bash
      env:
        BUILD_TYPE: "${{ inputs.build_type }}"
      run: |
        cd build
        cmake -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} ${{ inputs.extra_cmake_args }} .. -G Ninja
