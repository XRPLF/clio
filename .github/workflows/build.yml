name: Build Clio
on:
  push:
    branches: [master, release/*, develop, develop-next]
  pull_request:
    branches: [master, release/*, develop, develop-next]
  workflow_dispatch:

jobs:
  build_dev:
    name: Build on Mac/Clang14 and run tests
    continue-on-error: false
    runs-on: [self-hosted, macOS]

    steps:
      - uses: actions/checkout@v3
        with:
          path: clio

      #our self-host mac has conan-non-prod configured
      - name: List conan artifactory
        run: |
          conan search
          #remove cache , trigger rebuild for CI
          conan remove cassandra-driver/2.16.2  --force
          echo "123"
          conan search
          brew uninstall openssl
          ls /usr/local/opt/openssl

      - name: Install dependencies
        run: |
          brew install llvm@14 pkg-config protobuf ninja cassandra-cpp-driver bison cmake

      - name: Setup environment for llvm-14
        run: |
          export PATH="/usr/local/opt/llvm@14/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/llvm@14/lib -L/usr/local/opt/llvm@14/lib/c++ -Wl,-rpath,/usr/local/opt/llvm@14/lib/c++"
          export CPPFLAGS="-I/usr/local/opt/llvm@14/include"

      - name: Build Clio
        run: |
          pwd
          cd clio
          mkdir -p build
          cd build
          ls /usr/local/opt/openssl
          conan install .. -of . -b missing -s build_type=Release
          cmake -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --parallel

  # code_coverage:
  #   name: Build on Linux and code coverage
  #   continue-on-error: false
  #   runs-on: ubuntu-22.04

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         path: clio

  #     - name: install deps
  #       run: |
  #         sudo apt-get -y install git pkg-config protobuf-compiler libprotobuf-dev libssl-dev wget build-essential doxygen bison flex autoconf clang-format gcovr
  #         sudo pip install conan==1.57.0

  #     - name: test
  #       env:
  #         CONAN_KEY1: ${{ secrets.CONAN_ARTIFACTORY_KEY }}
  #       run: echo "$CONAN_KEY1"

  #     - name: Setup conan artifactory
  #       env:
  #         CONAN_KEY: ${{ secrets.CONAN_ARTIFACTORY_KEY }}
  #       run: |
  #         conan -v
  #         conan remote add conan-non-prod http://18.143.149.228:8081/artifactory/api/conan/conan-non-prod
  #         echo "$CONAN_KEY"
  #         conan user -p "$CONAN_KEY" -r conan-non-prod jfrog-clio
  #         history -10

  #     - name: Build clio
  #       run: |
  #         cd clio
  #         mkdir -p build
  #         cd build
  #         conan install .. -of . -b missing -s build_type=Release
  #         cmake -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=on ..
  #         cmake --build . --parallel
  #         make clio_tests-ccov

  #     - name: Code Coverage Summary Report
  #       uses: irongut/CodeCoverageSummary@v1.2.0
  #       with:
  #         filename: clio/build/clio_tests-gcc-cov/out.xml
  #         badge: true
  #         output: both
  #         format: markdown

  # - name: Save PR number and ccov report
  #   run: |
  #     mkdir -p ./UnitTestCoverage
  #     echo ${{ github.event.number }} > ./UnitTestCoverage/NR
  #     cp clio/build/clio_tests-gcc-cov/report.html ./UnitTestCoverage/report.html
  #     cp code-coverage-results.md ./UnitTestCoverage/out.md
  #     cat code-coverage-results.md > $GITHUB_STEP_SUMMARY
  # - name: Upload coverage reports to Codecov
  #   uses: codecov/codecov-action@v3
  #   with:
  #     files: clio/build/clio_tests-gcc-cov/out.xml

  # - uses: actions/upload-artifact@v3
  #   with:
  #     name: UnitTestCoverage
  #     path: UnitTestCoverage/

  # - uses: actions/upload-artifact@v3
  #   with:
  #     name: code_coverage_report
  #     path: clio/build/clio_tests-gcc-cov/out.xml
